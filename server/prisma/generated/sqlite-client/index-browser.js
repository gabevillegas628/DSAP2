
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  status: 'status',
  schoolId: 'schoolId',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schoolId: 'schoolId',
  instructor: 'instructor',
  students: 'students',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramSettingsScalarFieldEnum = {
  id: 'id',
  projectHeader: 'projectHeader',
  principalInvestigator: 'principalInvestigator',
  projectName: 'projectName',
  staffEmail: 'staffEmail',
  organismName: 'organismName',
  orfContactInformation: 'orfContactInformation',
  cloningVector: 'cloningVector',
  sequencePrimer: 'sequencePrimer',
  libraryName: 'libraryName',
  restrictionEnzyme: 'restrictionEnzyme',
  description: 'description',
  welcomeText: 'welcomeText',
  overview: 'overview',
  collectDemographics: 'collectDemographics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DemographicsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  academicYear: 'academicYear',
  yearsInProgram: 'yearsInProgram',
  classesTaken: 'classesTaken',
  otherScienceCourses: 'otherScienceCourses',
  age: 'age',
  gender: 'gender',
  ethnicity: 'ethnicity',
  educationLevel: 'educationLevel',
  city: 'city',
  state: 'state',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  loginTime: 'loginTime',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  createdAt: 'createdAt'
};

exports.Prisma.AnalysisQuestionScalarFieldEnum = {
  id: 'id',
  step: 'step',
  text: 'text',
  type: 'type',
  options: 'options',
  required: 'required',
  order: 'order',
  conditionalLogic: 'conditionalLogic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommonFeedbackScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  title: 'title',
  text: 'text',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UploadedFileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  cloneName: 'cloneName',
  size: 'size',
  uploadDate: 'uploadDate',
  status: 'status',
  progress: 'progress',
  analysisData: 'analysisData',
  assignedToId: 'assignedToId',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CloneDiscussionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  cloneId: 'cloneId',
  practiceCloneId: 'practiceCloneId',
  title: 'title',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastMessageAt: 'lastMessageAt'
};

exports.Prisma.DiscussionMessageScalarFieldEnum = {
  id: 'id',
  discussionId: 'discussionId',
  senderId: 'senderId',
  content: 'content',
  messageType: 'messageType',
  readBy: 'readBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  content: 'content',
  messageType: 'messageType',
  isRead: 'isRead',
  senderId: 'senderId',
  recipientId: 'recipientId',
  cloneId: 'cloneId',
  cloneProgress: 'cloneProgress',
  currentStep: 'currentStep',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isGroupMessage: 'isGroupMessage',
  groupParticipants: 'groupParticipants'
};

exports.Prisma.PracticeCloneScalarFieldEnum = {
  id: 'id',
  cloneName: 'cloneName',
  filename: 'filename',
  originalName: 'originalName',
  description: 'description',
  isActive: 'isActive',
  uploadDate: 'uploadDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PracticeAnswerScalarFieldEnum = {
  id: 'id',
  practiceCloneId: 'practiceCloneId',
  questionId: 'questionId',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation'
};

exports.Prisma.UserPracticeProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  practiceCloneId: 'practiceCloneId',
  progress: 'progress',
  answers: 'answers',
  currentStep: 'currentStep',
  status: 'status',
  lastSaved: 'lastSaved',
  submittedAt: 'submittedAt',
  reviewComments: 'reviewComments',
  reviewScore: 'reviewScore',
  lastReviewed: 'lastReviewed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelpTopicScalarFieldEnum = {
  id: 'id',
  analysisQuestionId: 'analysisQuestionId',
  title: 'title',
  videoBoxUrl: 'videoBoxUrl',
  helpDocumentUrl: 'helpDocumentUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StepHelpScalarFieldEnum = {
  id: 'id',
  step: 'step',
  title: 'title',
  description: 'description',
  videoBoxUrl: 'videoBoxUrl',
  helpDocumentUrl: 'helpDocumentUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  School: 'School',
  ProgramSettings: 'ProgramSettings',
  Demographics: 'Demographics',
  LoginLog: 'LoginLog',
  AnalysisQuestion: 'AnalysisQuestion',
  CommonFeedback: 'CommonFeedback',
  UploadedFile: 'UploadedFile',
  CloneDiscussion: 'CloneDiscussion',
  DiscussionMessage: 'DiscussionMessage',
  Message: 'Message',
  PracticeClone: 'PracticeClone',
  PracticeAnswer: 'PracticeAnswer',
  UserPracticeProgress: 'UserPracticeProgress',
  HelpTopic: 'HelpTopic',
  StepHelp: 'StepHelp'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
